name: Create Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.RELEASE_TOKEN }}
    
    - name: Configure Git
      run: |
        git config --local user.email "${{ github.actor }}@users.noreply.github.com"
        git config --local user.name "${{ github.actor }}"
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      
    - name: Set up Python
      run: uv python install 3.12
      
    - name: Install dependencies
      run: uv sync
      
    - name: Get current version
      id: current_version
      run: |
        VERSION=$(grep "^version = " pyproject.toml | cut -d'"' -f2)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
        
    - name: Calculate new version
      id: new_version
      run: |
        CURRENT="${{ steps.current_version.outputs.version }}"
        IFS='.' read -r major minor patch <<< "$CURRENT"
        
        case "${{ github.event.inputs.release_type }}" in
          major)
            major=$((major + 1))
            minor=0
            patch=0
            ;;
          minor)
            minor=$((minor + 1))
            patch=0
            ;;
          patch)
            patch=$((patch + 1))
            ;;
        esac
        
        NEW_VERSION="$major.$minor.$patch"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
        
    - name: Check if tag exists
      run: |
        if git rev-parse "v${{ steps.new_version.outputs.version }}" >/dev/null 2>&1; then
          echo "Tag v${{ steps.new_version.outputs.version }} already exists!"
          exit 1
        fi
        
    - name: Update version in pyproject.toml
      run: |
        # Update only the version under [project] section
        awk '
        /^\[project\]/ { in_project=1 }
        /^\[/ && !/^\[project\]/ { in_project=0 }
        in_project && /^version = / { 
          print "version = \"${{ steps.new_version.outputs.version }}\""
          next
        }
        { print }
        ' pyproject.toml > pyproject.toml.tmp && mv pyproject.toml.tmp pyproject.toml
        
    - name: Commit version bump
      run: |
        git add pyproject.toml
        git commit -m "üîñ Bump version to ${{ steps.new_version.outputs.version }}"
        
    - name: Update CHANGELOG.md
      run: |
        VERSION="${{ steps.new_version.outputs.version }}"
        DATE=$(date +%Y-%m-%d)
        
        # Add new version entry to CHANGELOG.md
        sed -i.bak "s/## \[Unreleased\]/## [Unreleased]\n\n## [$VERSION] - $DATE/" CHANGELOG.md
        
        git add CHANGELOG.md
        git commit -m "üìù Update CHANGELOG for v$VERSION"
        
    - name: Create and push tag
      run: |
        git tag -a "v${{ steps.new_version.outputs.version }}" -m "Release v${{ steps.new_version.outputs.version }}"
        git push origin HEAD
        git push origin "v${{ steps.new_version.outputs.version }}"